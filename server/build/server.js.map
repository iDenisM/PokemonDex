{"version":3,"file":"server.js","sources":["webpack:///webpack/bootstrap","webpack:///../client/src/App.js","webpack:///../client/src/Engine/Card.js","webpack:///../client/src/Engine/index.js","webpack:///../client/src/actions/index.js","webpack:///../client/src/components/Board/Board.js","webpack:///../client/src/components/Board/index.js","webpack:///../client/src/components/BoardCard/BoardCard.js","webpack:///../client/src/components/BotDeck/BotDeck.js","webpack:///../client/src/components/BotDeck/index.js","webpack:///../client/src/components/Button/Button.js","webpack:///../client/src/components/Button/index.js","webpack:///../client/src/components/Card/Card.js","webpack:///../client/src/components/Card/index.js","webpack:///../client/src/components/CloseGameModal/CloseGameModal.js","webpack:///../client/src/components/Deck/Deck.js","webpack:///../client/src/components/Deck/index.js","webpack:///../client/src/components/GetCard/GetCard.js","webpack:///../client/src/components/GetCard/index.js","webpack:///../client/src/components/Header/Header.js","webpack:///../client/src/components/Header/index.js","webpack:///../client/src/components/Image/Image.js","webpack:///../client/src/components/Image/index.js","webpack:///../client/src/components/Modal/Modal.js","webpack:///../client/src/components/Modal/index.js","webpack:///../client/src/components/PlayerDeck/PlayerDeck.js","webpack:///../client/src/components/PlayerDeck/index.js","webpack:///../client/src/components/Pokedex/Pokedex.js","webpack:///../client/src/components/Pokedex/index.js","webpack:///../client/src/components/Pokemon/Pokemon.js","webpack:///../client/src/components/Pokemon/index.js","webpack:///../client/src/components/PokemonModal/PokemonModal.js","webpack:///../client/src/components/PokemonModal/index.js","webpack:///../client/src/components/RadioInput/RadioInput.js","webpack:///../client/src/components/RadioInput/index.js","webpack:///../client/src/components/Search/Search.js","webpack:///../client/src/components/Search/index.js","webpack:///../client/src/components/StartButton/StartButton.js","webpack:///../client/src/components/StartButton/index.js","webpack:///../client/src/queries/index.js","webpack:///../client/src/reducers/botPokemonList.js","webpack:///../client/src/reducers/game.js","webpack:///../client/src/reducers/index.js","webpack:///../client/src/reducers/playerActions.js","webpack:///../client/src/reducers/pokemonList.js","webpack:///../client/src/reducers/search.js","webpack:///../client/src/reducers/select.js","webpack:///./src/components/Html.js","webpack:///./src/server.js","webpack:///external \"@apollo/client\"","webpack:///external \"@apollo/client/react/ssr\"","webpack:///external \"@babel/polyfill\"","webpack:///external \"cross-fetch/polyfill\"","webpack:///external \"express\"","webpack:///external \"prop-types\"","webpack:///external \"react\"","webpack:///external \"react-dom/server\"","webpack:///external \"react-redux\"","webpack:///external \"redux\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import './App.css';\r\nimport React from 'react';\r\nimport Header from './components/Header';\r\nimport Search from './components/Search';\r\nimport Pokedex from './components/Pokedex';\r\nimport PokemonModal from './components/PokemonModal';\r\nimport Board from './components/Board';\r\n\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <Header/>\r\n      <main>\r\n        <Search />\r\n        <Pokedex />\r\n        <PokemonModal />\r\n        <Board />\r\n      </main>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","export default class Card {\r\n  constructor(data, attacks) {\r\n    this.id = data.id;\r\n    this.name = data.name;\r\n    this.HP = data.maxHP;\r\n    this.maxCP = data.maxCP;\r\n    this.image = data.image;\r\n    this.attacks = {\r\n      fast: attacks?.fast,\r\n      special: attacks?.special\r\n    }\r\n  }\r\n\r\n  get isDead() {\r\n    return this.HP <=  0;\r\n  }\r\n}","import Card from './Card';\r\n\r\nconst minThreshold = 0.8;\r\nconst maxThreshold = 1.2;\r\n\r\nclass Engine {\r\n  botDraftCards = [];\r\n  winner = null;\r\n  payerCards = [];\r\n  botCards = [];\r\n  _gameStarted = false;\r\n  _currentTurn = false;\r\n  _gameFinished = false;\r\n  __cloneBotCards = [];\r\n\r\n  constructor() {\r\n    if (!Engine.instance) {\r\n      Engine.instance = this;\r\n    }\r\n\r\n    return Engine.instance;\r\n  }\r\n\r\n  /**\r\n   * Returns if game is started state\r\n   */\r\n  get gameStarted() {\r\n    return this._gameStarted;\r\n  }\r\n\r\n  /**\r\n   * Sets the gameStarted value based\r\n   * on conditions if one not true\r\n   * then the game will not be started\r\n   */\r\n  set gameStarted(start) {\r\n    if (start) {\r\n      \r\n      this.botDraftCards = this._createDraftBotDeck();\r\n\r\n      this._gameStarted = \r\n        !this.gameStarted &&\r\n        this._allCards?.length > 0 &&\r\n        this.payerCards?.length > 0 &&\r\n        this.botDraftCards?.length > 0\r\n    } else {\r\n      this._gameStarted = false;\r\n      this.botDraftCards = [];\r\n    }\r\n  }\r\n\r\n  get gameFinished() {\r\n    return this._gameFinished;\r\n  }\r\n\r\n  set gameFinished(value) {\r\n    this._gameFinished = value;\r\n  }\r\n\r\n  /**\r\n   * Start the game\r\n   */\r\n  startGame() {\r\n    this.gameStarted = true;\r\n    if (this.gameStarted) {\r\n      this.__clonePlayerCards = [...this.payerCards];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * End the game\r\n   */\r\n  endGame() {\r\n    this._resetValues();\r\n    this.gameStarted = false;\r\n  }\r\n  \r\n  /**\r\n   * Restart the current game\r\n   */\r\n  resetGame() {\r\n    this._resetValues();\r\n    this.payerCards = {...this.__clonePlayerCards};\r\n    this.botCards = {...this.__cloneBotCards};\r\n  }\r\n\r\n  _resetValues() {\r\n    this.gameFinished = false;\r\n    this.winner = null;\r\n    this.payerCards = []\r\n  }\r\n\r\n  /**\r\n   * Add the full list of available cards\r\n   * In this case every single card has a\r\n   * simpler api use other methods to get\r\n   * the full data of card\r\n   * @param {[object]} cards \r\n   */\r\n  addCards(cards) {\r\n    this._allCards = cards;\r\n  }\r\n\r\n  /**\r\n   * Create card for player and add to \r\n   * players deck\r\n   * Attcks is object of fast and special\r\n   * where each has name and damage\r\n   * @param {object} card \r\n   * @param {object} attacks \r\n   */\r\n  addPlayerCard(card, attacks) {\r\n    if (!attacks) return false\r\n    if (card &&  attacks.fast && attacks.special) {\r\n      const playerCard = new Card(card, attacks);\r\n      this.payerCards.push(playerCard);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes the card from the players deck\r\n   * @param {number} cardId \r\n   */\r\n  removePlayerCard(cardId) {\r\n    const index = this.payerCards.findIndex(c => c.id === cardId);\r\n    if (index !== -1) this.payerCards.splice(index, 1);\r\n  }\r\n\r\n  /**\r\n   * Adds to the bots deck a new card\r\n   * @param {object} card \r\n   */\r\n  addBotCard(card) {\r\n    if (!card) return false;\r\n    const index = this.botCards.findIndex(c => c.id === card.id);\r\n    if (index !== -1) return this.botCards[index];\r\n    const attacks = this._getBotAttacks(card);\r\n    const botCard = new Card(card, attacks);\r\n    this.botCards.push(botCard);\r\n    this.__cloneBotCards.push(botCard);\r\n  }\r\n\r\n  /**\r\n   * Returns best attacks from card api\r\n   * @param {object} card \r\n   */\r\n  _getBotAttacks(card) {\r\n    const fast = this._getBestAttck(card.attacks.fast);\r\n    const special = this._getBestAttck(card.attacks.special);\r\n    return { fast, special };\r\n  }\r\n\r\n  /**\r\n   * Returns best attack from list\r\n   * @param {array} attacks \r\n   */\r\n  _getBestAttck(attacks) {\r\n    let bestAttack = {damage: 0};\r\n    for (const attack of attacks) {\r\n      if (attack.damage > bestAttack.damage) {\r\n        bestAttack = attack\r\n      }\r\n    }\r\n    return bestAttack;\r\n  }\r\n\r\n  /**\r\n   * Returns the updated card data of \r\n   * the player by id\r\n   * @param {number} id \r\n   */\r\n  getPlayerCardById(id) {\r\n    if (this.gameFinished || !id) return null;\r\n    this.gameFinished = this._checkGameFinished(this.payerCards);\r\n    if (this.gameFinished) this.winner = 'Computer';\r\n    return this.payerCards.find(c => c.id === id);\r\n  }\r\n\r\n  /**\r\n   * Returns the best bot card from player pick\r\n   * @param {object} playerCard \r\n   */\r\n  getBotCard(playerCard) {\r\n    if (this.gameFinished) return null;\r\n    this.gameFinished = this._checkGameFinished(this.botCards);\r\n    \r\n    if (this.gameFinished) this.winner = 'Player';\r\n    if (!playerCard) return null;\r\n\r\n    const hasCards = this.botCards.find(c => c.isDead !== true);\r\n    let cardToPlay = this.botCards.find(c => c.maxCP >= playerCard.maxCP && !c.isDead);\r\n    if (!cardToPlay && hasCards) {\r\n      cardToPlay = this.botCards.find(c => !c.isDead);\r\n    }\r\n    return cardToPlay;\r\n  }\r\n\r\n  /**\r\n   * Does damage to the defending card\r\n   * @param {string} attckType fast | special\r\n   * @param {object} attackingCard \r\n   * @param {object} defendingCard \r\n   */\r\n  doAttack(attckType, attackingCard, defendingCard) {\r\n    defendingCard.HP -= \r\n      attckType === 'fast' ? \r\n      attackingCard.attacks.fast.damage : \r\n      attackingCard.attacks.special.damage;\r\n  }\r\n\r\n  botDoAttack(attackingCard, defendingCard) {\r\n    const botAttacks = attackingCard.attacks;\r\n    const attackType = \r\n      botAttacks.fast > botAttacks.special ? \r\n      botAttacks.fast : \r\n      botAttacks.special;\r\n    defendingCard.HP -= attackType.damage;\r\n  }\r\n\r\n  /**\r\n   * Makes a check if the game is finished\r\n   * @param {object} cards \r\n   */\r\n  _checkGameFinished(cards) {\r\n    if (cards.length === 0) return false;\r\n    return !cards.find(card => card.HP > 0);\r\n  }\r\n\r\n  /**\r\n   * Create a draft deck for the bot so that\r\n   * it can be used latter for loading the \r\n   * bot real card\r\n   */\r\n  _createDraftBotDeck() {\r\n    let draftBots = [];\r\n\r\n    const findFn = (currentCard, playerCard) => {\r\n      const a = !this.payerCards.find(b => b.id === currentCard.id)  \r\n      const b = !draftBots.find(b => b.id === currentCard.id)\r\n      const c = currentCard.maxCP > playerCard.maxCP * minThreshold;\r\n      const d = currentCard.maxCP < playerCard.maxCP * maxThreshold;\r\n\r\n      return a && b && c && d;\r\n    }\r\n    for (const card of this.payerCards) {\r\n      const bot = this._allCards.find(c => findFn(c, card))\r\n      if (bot) draftBots.push(bot);\r\n    }\r\n\r\n    return draftBots;\r\n  }\r\n}\r\n\r\nconst engine = new Engine();\r\nexport default engine;","export const searchKeyDown = (value) => ({\r\n  type: 'SEARCHING',\r\n  payload: value\r\n})\r\n\r\nexport const selectPokemonClick = (value) => ({\r\n  type: 'SELECTING',\r\n  payload: value\r\n})\r\n\r\nexport const addPokemonToList = (value) => ({\r\n  type: 'ADDING',\r\n  payload: value\r\n})\r\n\r\nexport const removePokemonFromList = (value) => ({\r\n  type: 'REMOVING',\r\n  payload: value\r\n})\r\n\r\nexport const restPokemonList = () => ({\r\n  type: 'RESETECARDS'\r\n})\r\n\r\nexport const doStartGame = () => ({\r\n  type: 'STARTGAME'\r\n})\r\n\r\nexport const doEndGame = () => ({\r\n  type: 'ENDGAME'\r\n})\r\n\r\nexport const addBots = (value) => ({\r\n  type: 'ADDINGBOTS',\r\n  payload: value\r\n})\r\n\r\nexport const removeBots = () => ({\r\n  type: 'REMOVEINGBOTS'\r\n})\r\n\r\nexport const playerPickedCard = (value) => ({\r\n  type: 'PLAYERPICK',\r\n  payload: value\r\n})\r\n\r\nexport const playerTrun = (value) => ({\r\n  type: 'PLAYERTURN',\r\n  payload: value\r\n})\r\n\r\nexport const askedToEndGame = (value) => ({\r\n  type: 'ASKENDGAME',\r\n  payload: value\r\n})","import './Board.css';\r\nimport React, { useState } from 'react';\r\nimport PlayerDeck from '../PlayerDeck';\r\nimport BotDeck from '../BotDeck';\r\nimport Engine from '../../Engine';\r\nimport BoardCard from '../BoardCard/BoardCard';\r\nimport Card from '../Card';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport CloseGameModal from '../CloseGameModal/CloseGameModal';\r\nimport { restPokemonList } from '../../actions';\r\n\r\nconst Board = () => {\r\n  const [isOpened, setIsOpened] = useState(false);\r\n  const [showCloseGameModal, setShowCloseGameModal] = useState(false);\r\n  const [isPlayersCurrentTurn, setIsPlayersCurrentTurn] = useState(true);\r\n  const gameStarted = useSelector((state) => state.gameStarted);\r\n  const playerAction = useSelector((state) => state.playerAction);\r\n  const dispatchEvent = useDispatch();\r\n  \r\n  const playerCard = Engine.getPlayerCardById(playerAction.pickedCardId);\r\n  const botCard = Engine.getBotCard(playerCard);\r\n\r\n  if (gameStarted && !Engine.gameStarted) {\r\n    Engine.startGame();\r\n  }\r\n  if (!gameStarted && Engine.gameStarted) {\r\n    Engine.endGame();\r\n    setTimeout(() => {\r\n      dispatchEvent(restPokemonList());\r\n    }, 1000);\r\n  }\r\n\r\n  if (Engine.gameFinished && !showCloseGameModal && Engine.gameStarted) {\r\n    setShowCloseGameModal(true);\r\n  }\r\n\r\n  const toggleBoard = () => {\r\n    setIsOpened(!isOpened)\r\n  }\r\n\r\n  const hideCloseGameModal = () => {\r\n    setShowCloseGameModal(false);\r\n  }\r\n\r\n  let boardClassList = ['board'];\r\n\r\n  if (gameStarted && !isOpened) toggleBoard();\r\n  if (!gameStarted && isOpened) toggleBoard();\r\n  if (isOpened) boardClassList.push('board--open');\r\n\r\n  if (!isPlayersCurrentTurn) {\r\n    // bot attacks\r\n  }\r\n\r\n  const playerFastAttack = () => {\r\n    // if (!isPlayersCurrentTurn) return false;\r\n    concludeAttack('fast')\r\n  }\r\n  \r\n  const playerSpecialAttack = () => {\r\n    // if (!isPlayersCurrentTurn) return false;\r\n    concludeAttack('special')\r\n  }\r\n\r\n  const concludeAttack = (type) => {\r\n    if (playerCard.isDead) return false;\r\n    Engine.doAttack(type, playerCard, botCard);\r\n    Engine.botDoAttack(botCard, playerCard);\r\n    setIsPlayersCurrentTurn(state => !state);\r\n  }\r\n\r\n  if (playerAction.playerTurn) {\r\n    if (playerAction.pickedCardId) Engine.getBotCard(playerCard)\r\n  } else {\r\n\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <BotDeck />\r\n      <div className={boardClassList.join(' ')}>\r\n        <BoardCard \r\n          card={botCard}\r\n          addClass={['board__card--bot']}>\r\n          {\r\n            botCard && (\r\n              <Card card={botCard} />\r\n            )\r\n          }\r\n        </BoardCard>\r\n        <BoardCard \r\n          card={playerCard}\r\n          addClass={['board__card--player']} \r\n          hasLockButton={true} \r\n          attack1Click={playerFastAttack}\r\n          attack2Click={playerSpecialAttack}>\r\n          {\r\n            playerCard && (\r\n              <Card card={playerCard} />\r\n            )\r\n          }\r\n        </BoardCard>\r\n      </div>\r\n      <PlayerDeck />\r\n      <CloseGameModal show={showCloseGameModal} onClose={hideCloseGameModal} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Board;","export { default } from './Board';","import './BoardCard.css';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Button from '../Button';\r\n\r\nconst BoardCard = ({ card, children, addClass, attack1Click, attack2Click}) => {\r\n  const { name, attacks, HP } = card || {name: null, attacks: {fast:null, special:null}, HP: null};\r\n\r\n  return (\r\n    <div className={['board__card', ...addClass].join(' ')}>\r\n      <Button addClass={['board__card__attack']} onClick={attack1Click}>\r\n        {\r\n          attacks.fast ? \r\n          (\r\n            <>\r\n              <span className=\"name\">{attacks.fast.name}</span>\r\n              <span className=\"damage\">{attacks.fast.damage}</span>\r\n            </>\r\n          ) :\r\n          (\r\n            <span className=\"text\">Attack fast</span>\r\n          )\r\n        }\r\n      </Button>\r\n      <div className=\"board__card__holder\">\r\n        { children }\r\n        {\r\n          HP !== null && (\r\n            <div className=\"board__card__health\">Health: <span className=\"text\">{HP}</span></div>\r\n          )\r\n        }\r\n      </div>\r\n      <Button addClass={['board__card__attack']} onClick={attack2Click}>\r\n        {\r\n          attacks.special ? \r\n          (\r\n            <>\r\n              <span className=\"name\">{attacks.special.name}</span>\r\n              <span className=\"damage\">{attacks.special.damage}</span>\r\n            </>\r\n          ) :\r\n          (\r\n            <span className=\"text\">Attack special</span>\r\n          )\r\n        }\r\n      </Button>\r\n      {\r\n        name && (\r\n          <div className=\"board__card__name\">{name}</div>\r\n        )\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nBoardCard.propTypes = {\r\n  children: PropTypes.any,\r\n  addClass: PropTypes.array,\r\n  attack1Click: PropTypes.func,\r\n  attack2Click: PropTypes.func,\r\n  card: PropTypes.object\r\n}\r\n\r\nBoardCard.defaultProps = {\r\n  addClass: [],\r\n  attack1Click: undefined,\r\n  attack2Click: undefined,\r\n  card: null\r\n};\r\n\r\nexport default BoardCard;","import './BotDeck.css';\r\nimport React from 'react';\r\nimport Deck from '../Deck';\r\nimport GetCard from '../GetCard';\r\nimport { useSelector } from 'react-redux';\r\nimport Engine from '../../Engine';\r\n\r\nconst BotDeck = () => {\r\n  const gameStarted = useSelector((state) => state.gameStarted);\r\n\r\n  const botCards = gameStarted ? Engine.botDraftCards : [];\r\n  \r\n  let classList = ['deck__bot', 'card__close--hide'];\r\n  if (botCards.length) classList.push('deck--open');\r\n\r\n  return (\r\n    <Deck addClass={classList}>\r\n      {\r\n        botCards && botCards.length > 0 && botCards.map(c => (\r\n          <GetCard key={c.id} id={c.id} name={c.name} />\r\n        ))\r\n      }\r\n    </Deck>\r\n  )\r\n}\r\n\r\nexport default BotDeck;","export { default } from './BotDeck';","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Button.css';\r\n\r\nconst Button = ({ children, addClass, ...porps }) => {\r\n  return (\r\n    <button className={['btn', ...addClass].join(' ')} {...porps}>\r\n      { children }\r\n    </button>\r\n  )\r\n}\r\n\r\nButton.propTypes = {\r\n  children: PropTypes.any,\r\n  addClass: PropTypes.array,\r\n  onClick: PropTypes.func\r\n}\r\n\r\nButton.defaultProps = {\r\n  addClass: [],\r\n  onClick: undefined\r\n};\r\n\r\nexport default Button;","export { default } from './Button';\r\n\r\n","import './Card.css';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Image from '../Image';\r\nimport Button from '../Button';\r\n\r\nconst Card = ({ card, addClass, onCloseClick, onClick }) => {\r\n  const { image, name, HP } = card;\r\n\r\n  const classList = [...addClass];\r\n  if (HP < 0) classList.push('dead');\r\n  \r\n  return (\r\n    <div className={['card', classList].join(' ')} onClick={onClick}>\r\n      <Image addClass={['card__img']} src={image} alt={name} width={20} height={20} />\r\n      <Button addClass={['card__close']} onClick={onCloseClick} >\r\n        <span className=\"ico\"></span>\r\n        <span className=\"is-vHidden\">Remove</span>\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nCard.propTypes = {\r\n  card: PropTypes.object.isRequired,\r\n  addClass: PropTypes.array,\r\n  onClick: PropTypes.func\r\n}\r\n\r\nCard.defaultProps = {\r\n  addClass: [],\r\n  onClick: null\r\n};\r\n\r\nexport default Card;","export { default } from './Card';","import './CloseGameModal';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Engine from '../../Engine';\r\nimport Button from '../Button';\r\nimport Modal from '../Modal';\r\nimport { useDispatch } from 'react-redux';\r\nimport { doEndGame, removeBots, playerPickedCard } from '../../actions'\r\n\r\nconst CloseGameModal = ({ show, onClose }) => {\r\n  const dispatchEvent = useDispatch();\r\n\r\n  const endGame = () => {\r\n    dispatchEvent(removeBots());\r\n    dispatchEvent(playerPickedCard(null));\r\n    dispatchEvent(doEndGame());\r\n    onClose();\r\n  }\r\n\r\n  const resetGame = () => {\r\n    // Engine.reset();\r\n  }\r\n\r\n  return (\r\n    <Modal show={show} addClass={['modal__start', Engine.gameFinished ? 'winner' : '']} onClose={onClose}>\r\n      {\r\n        (Engine.gameFinished && show) && (\r\n          <span className=\"winner\">And the winner is {`${Engine.winner}`}</span>\r\n        )\r\n      }\r\n      <Button addClass={['modal__start__restart']} onClick={resetGame}>\r\n        <span className=\"text\">Restart Game</span>\r\n      </Button>\r\n      <Button addClass={['modal__start__close']} onClick={endGame}>\r\n        <span className=\"text\">End Game</span>\r\n      </Button>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nButton.propTypes = {\r\n  show: PropTypes.bool,\r\n  onClose: PropTypes.func\r\n}\r\n\r\nButton.defaultProps = {\r\n  onClose: undefined\r\n};\r\n\r\nexport default CloseGameModal;","import './Deck.css';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Card from '../Card';\r\nimport { useDispatch } from 'react-redux';\r\nimport { removePokemonFromList } from '../../actions';\r\nimport Engine from '../../Engine';\r\n\r\nconst Deck = ({ cards, children, addClass, onCardClick }) => {\r\n  const dispatchRemove = useDispatch();\r\n\r\n  const removeCard = (id) => {\r\n    Engine.removePlayerCard(id);\r\n    dispatchRemove(removePokemonFromList({id}));\r\n  }\r\n\r\n  const clickCard = (id) => {\r\n    onCardClick(id);\r\n  }\r\n\r\n  return (\r\n    <section className={['deck', ...addClass].join(' ')}>\r\n      {\r\n        cards && cards.length > 0 && cards.map(card => (\r\n          <Card key={card.id} card={card} onCloseClick={() => {\r\n            removeCard(card.id)\r\n          }} onClick={clickCard.bind(this, card.id)} />\r\n        ))\r\n      }\r\n      { children }\r\n    </section>\r\n  )\r\n}\r\n\r\nDeck.propTypes = {\r\n  cards: PropTypes.array,\r\n  addClass: PropTypes.array,\r\n}\r\n\r\nDeck.defaultProps = {\r\n  addClass: [],\r\n};\r\n\r\nexport default Deck;","export { default } from './Deck';","import React from 'react';\r\nimport Card from '../Card';\r\nimport { useQuery } from '@apollo/client';\r\nimport { GET_POKEMON } from '../../queries'\r\nimport Engine from '../../Engine';\r\n\r\nconst GetCard = ({ id, name }) => {\r\n  const { loading, error, data } = useQuery(GET_POKEMON(id, name));\r\n  \r\n  if (loading) return <div>...Loading</div>\r\n  if (error) return <div>Something went wrong</div>\r\n  const botCard = { ...data.pokemon };\r\n  Engine.addBotCard(botCard);\r\n\r\n  return (\r\n    <Card key={botCard.id} card={botCard} />\r\n  )\r\n}\r\n\r\nexport default GetCard;","export { default } from './GetCard';","import './Header.css';\r\nimport React from 'react';\r\nimport Image from '../Image';\r\nimport StartButton from '../StartButton';\r\nimport logo from '../../static/Pokemon-Logo.png';\r\n\r\nconst Header = () => {\r\n\r\n  return (\r\n    <header className=\"header\">\r\n      <Image addClass={['header__logo']} src={logo} alt=\"pokemon logo\" width={100} height={50} />\r\n      <StartButton />\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header;","export { default } from './Header'","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport './Image.css';\r\n\r\nconst Image = ({ src, alt, width, height, addClass }) => {\r\n  const aspectRatio = `${height * 100 / width}%`;\r\n  return (\r\n    <div className={['img', ...addClass].join(' ')} style={{paddingBottom: aspectRatio}}>\r\n      <img className=\"img__src\" src={src} alt={alt} width={width} height={height}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nImage.defaultProps = {\r\n  backgroundColor: null,\r\n  primary: false,\r\n  size: 'medium',\r\n  onClick: undefined,\r\n  addClass: []\r\n};\r\n\r\nImage.propTypes = {\r\n  src: PropTypes.string.isRequired,\r\n  alt: PropTypes.string.isRequired,\r\n  width: PropTypes.number.isRequired,\r\n  height: PropTypes.number.isRequired,\r\n  addClass: PropTypes.array\r\n}\r\n\r\nexport default Image;","export { default } from './Image';","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Button from '../Button';\r\nimport './Modal.css';\r\n\r\nconst Modal = ({ show, children, addClass, onClose, ...porps }) => {\r\n  // const document = document || {};\r\n  let classList = ['modal'];\r\n  \r\n  if (show) {\r\n    // document.body.classList.add('scroll-off');\r\n    classList.push('modal--open');\r\n  } else {\r\n    // document.body.classList.remove('scroll-off');\r\n  }\r\n\r\n  return (\r\n    <div className={[...classList, ...addClass].join(' ')} {...porps}>\r\n      <div className=\"modal__content\" >\r\n        <Button addClass={['modal__btn']} onClick={onClose}>\r\n          <span className=\"ico\"></span>\r\n          <span className=\"text is-vHidden\">Close</span>\r\n        </Button>\r\n        { children }\r\n      </div>\r\n      <div className=\"modal__overlay\" onClick={onClose}></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nModal.propTypes = {\r\n  show: PropTypes.bool,\r\n  children: PropTypes.node,\r\n  addClass: PropTypes.array,\r\n  onClose: PropTypes.func\r\n}\r\n\r\nModal.defaultProps = {\r\n  show: false,\r\n  addClass: []\r\n};\r\n\r\nexport default Modal;","export { default } from './Modal';","import './PlayerDeck.css';\r\nimport React from 'react';\r\nimport Deck from '../Deck';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { playerPickedCard } from '../../actions'\r\n\r\nconst PlayerDeck = () => {\r\n  const cards = useSelector((state) => state.pokemonList);\r\n  const gameStarted = useSelector((state) => state.gameStarted);\r\n  const playerAction = useSelector((state) => state.playerAction);\r\n  const dispatchEvent = useDispatch();\r\n\r\n  let classList = ['deck__player'];\r\n  if (cards.length) classList.push('deck--open');\r\n  if (gameStarted) classList.push('card__close--hide')\r\n\r\n  const cardClicked = (id) => {\r\n    if (gameStarted && playerAction.playerTurn) {\r\n      dispatchEvent(playerPickedCard(id))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Deck cards={cards} addClass={classList} onCardClick={cardClicked} />\r\n  )\r\n}\r\n\r\nexport default PlayerDeck;","export { default } from './PlayerDeck';","import './Pokedex.css';\r\nimport React from 'react';\r\nimport Button from '../Button';\r\nimport Image from '../Image';\r\nimport { useQuery } from '@apollo/client';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { selectPokemonClick } from '../../actions'\r\nimport { ALL_POKEMONS } from '../../queries'\r\nimport Engine from '../../Engine';\r\n\r\nconst Pokedex = () => {\r\n  const { loading, error, data } = useQuery(ALL_POKEMONS(20));\r\n  const dispatchClick = useDispatch();\r\n  const selectSearchProduct = (state) => state.textSearch;\r\n  const textSearch = useSelector(selectSearchProduct);\r\n\r\n\r\n  /** START RENDERING **/\r\n\r\n  if (loading) return <p>Loading...</p>\r\n  if (error) return <h2>Whoops... somthing went wrong!</h2>\r\n\r\n  Engine.addCards(data.pokemons);\r\n\r\n  const filterMap = {\r\n    All: () => true,\r\n    Filtered: (pokemon) => pokemon.name.toLocaleLowerCase().includes(textSearch)\r\n  }\r\n\r\n  const task = textSearch ? 'Filtered' : 'All';\r\n\r\n  return (\r\n    <div className=\"pokemons\">\r\n      {\r\n        data.pokemons.filter(filterMap[task]).map(p => (\r\n          <div className=\"pokemon\" key={p.id}>\r\n            <Button addClass={['pokemon__btn']} onClick={() => {\r\n              const value = {\r\n                id: p.id,\r\n                name: p.name,\r\n                image: p.image\r\n              }\r\n              dispatchClick(selectPokemonClick(value));\r\n            }}>\r\n              <Image \r\n                addClass={['pokemon__img']} \r\n                src={p.image} \r\n                alt={p.name} \r\n                width={170}\r\n                height={170}\r\n              />\r\n            </Button>\r\n            <div className=\"pokemon__name\">{p.name}</div>\r\n          </div>\r\n        ))\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Pokedex;","export { default } from './Pokedex';","import './Pokemon.css';\r\nimport React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Image from '../Image';\r\nimport Button from '../Button';\r\nimport RadioInput from '../RadioInput';\r\nimport { useQuery } from '@apollo/client';\r\nimport { useDispatch } from 'react-redux';\r\nimport { selectPokemonClick, addPokemonToList } from '../../actions';\r\nimport { GET_POKEMON } from '../../queries'\r\nimport Engine from '../../Engine';\r\n\r\nconst Pokemon = (pokemonBase) => {\r\n  const { id, name, image } = pokemonBase.pokemonBase;\r\n  const [fastAttack, setFastAttack] = useState(null);\r\n  const [specialAttack, setSpecialAttack] = useState(null);\r\n  const [warningSlection, setWarningSlection] = useState(false);\r\n  const { loading, error, data } = useQuery(GET_POKEMON(id, name));\r\n  const mode = loading ? 'loading' : '';\r\n  const fastGrpId = 'fast-grp';\r\n  const specialGrpId = 'special-grp';\r\n  const dispatchEvent = useDispatch();\r\n  let pokemonData = { id, name, image };\r\n\r\n  if (data) pokemonData = { ...data.pokemon };\r\n  if (error) return <h2>Whoops... somthing went wrong!</h2>\r\n\r\n  const { \r\n    weight, classification,\r\n    types, height, attacks } = pokemonData;\r\n\r\n  const selectPokemon = () => {\r\n    if (fastAttack && specialAttack) {\r\n      const fast = pokemonData.attacks.fast.find(e => e.name === fastAttack);\r\n      const special = pokemonData.attacks.special.find(e => e.name === specialAttack)\r\n      Engine.addPlayerCard(pokemonData, { fast, special });\r\n      dispatchEvent(addPokemonToList(pokemonData))\r\n      dispatchEvent(selectPokemonClick(null));\r\n      return true;\r\n    }\r\n    setWarningSlection(true);\r\n    setTimeout(() => {\r\n      setWarningSlection(false);\r\n    }, 1500);\r\n  }\r\n\r\n  const attackChanged = (attackName, attackType) => {\r\n    if (attackType === 'fast') {\r\n      return setFastAttack(attackName);\r\n    }\r\n    return setSpecialAttack(attackName);\r\n  }\r\n\r\n  return (\r\n    <article className=\"pk\">\r\n      <header className=\"pk__header\">\r\n        <h2 className=\"pk__name\">{name}</h2>\r\n        <div className=\"pk__img\">\r\n          <Image src={image} alt={name} width={200} height={200} />\r\n        </div>\r\n      </header>\r\n      <main className=\"pk__desc\">\r\n        <div className=\"pk__desc__header\">Characteristics</div>\r\n        <div className=\"pk__content pk__class\">{classification}</div>\r\n        {\r\n          types?.length > 0 && (\r\n            <div className=\"pk__content pk__types\">\r\n              <span>Types:</span>\r\n              <span>[\r\n                {\r\n                  types.join(', ')\r\n                }\r\n              ]</span>\r\n            </div>\r\n          )\r\n        }\r\n        \r\n        <div className={['pk__content', 'pk__weight', mode].join(' ')}>\r\n          <div className='pk__content__header'>Weight:</div>\r\n          <div className={['pk__weight--min', mode].join(' ')}>\r\n            <span className=\"name\">Min</span>\r\n            <span className=\"value\">{weight?.minimum}</span>\r\n          </div>\r\n          <div className={['pk__weight--max', mode].join(' ')}>\r\n            <span className=\"name\">Max</span>\r\n            <span className=\"value\">{weight?.maximum}</span>\r\n          </div>\r\n        </div>\r\n        <div className={['pk__content', 'pk__height', mode].join(' ')}>\r\n          <div className=\"pk__content__header\">Height:</div>\r\n          <div className={['pk__height--min', mode].join(' ')}>\r\n            <span className=\"name\">Min</span>\r\n            <span className=\"value\">{height?.minimum}</span>\r\n          </div>\r\n          <div className={['pk__height--max', mode].join(' ')}>\r\n            <span className=\"name\">Max</span>\r\n            <span className=\"value\">{height?.maximum}</span>\r\n          </div>\r\n        </div>    \r\n        <form className=\"pk__attack\">\r\n          <fieldset>\r\n            <legend className=\"is-vHidden\">Choose your attack</legend>\r\n            <div className=\"pk__attack__header\">Attacks:</div>\r\n            {\r\n              attacks?.fast?.length && (\r\n                <fieldset className=\"pk__attack__type\">\r\n                  <legend className=\"is-vHidden\">Fast attack</legend>\r\n                  <div className=\"pk__attack__name\">Fast</div>\r\n                  <div id={fastGrpId} className=\"pk__attack__group\">\r\n                    {\r\n                      attacks.fast.map(({ name, type, damage }, i) => (\r\n                        <RadioInput \r\n                          key={i} \r\n                          id={`${fastGrpId}-${i}`} \r\n                          value={name} \r\n                          group={fastGrpId}\r\n                          addClass={['pk__attack__variant']}\r\n                          onChange={() => {\r\n                            attackChanged(name, 'fast')\r\n                          }}\r\n                        >\r\n                          <span className=\"name\">{name}</span>\r\n                          <span className=\"type\">{type}</span>\r\n                          <span className=\"damage\">Dmg: {damage}</span>\r\n                        </RadioInput>\r\n                      ))\r\n                    }\r\n                  </div>\r\n                </fieldset>\r\n              )\r\n            }\r\n            {\r\n              attacks?.special?.length && (\r\n                <fieldset className=\"pk__attack__type\">\r\n                  <legend className=\"is-vHidden\">Special attack</legend>\r\n                  <div className=\"pk__attack__name\">Special</div>\r\n                  <div id={specialGrpId} className=\"pk__attack__group\">\r\n                    {\r\n                      attacks.special.map(({ name, type, damage }, i) => (\r\n                        <RadioInput \r\n                          key={i} \r\n                          id={`${specialGrpId}-${i}`} \r\n                          value={name} \r\n                          group={specialGrpId}\r\n                          addClass={['pk__attack__variant']}\r\n                          onChange={() => {\r\n                            attackChanged(name, 'special')\r\n                          }}\r\n                        >\r\n                          <span className=\"name\">{name}</span>\r\n                          <span className=\"type\">{type}</span>\r\n                          <span className=\"damage\">Dmg: {damage}</span>\r\n                        </RadioInput>\r\n                      ))\r\n                    }\r\n                  </div>\r\n                </fieldset>\r\n              )\r\n            }\r\n          </fieldset>\r\n        </form>\r\n      </main>\r\n      <footer className=\"pk__footer\">\r\n        <div className={['pk__warning', warningSlection ? 'pk__warning--open' : ''].join(' ')}>\r\n          Please select one Fast and one Special attacksf\r\n          </div>\r\n        <Button addClass={['pk__select']} onClick={selectPokemon}>\r\n          <span className=\"text\">Pick this pokemon</span>\r\n        </Button>\r\n      </footer>\r\n    </article>\r\n  )\r\n}\r\n\r\n\r\nPokemon.propTypes = {\r\n  pokemonBase: PropTypes.object\r\n}\r\n\r\nPokemon.defaultProps = {\r\n  pokemonBase: null\r\n}\r\n\r\nexport default Pokemon;","export { default } from './Pokemon';","import React, { useState } from 'react';\r\nimport Pokemon from '../Pokemon';\r\nimport Modal from '../Modal';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { selectPokemonClick } from '../../actions'\r\nimport './PokemonModal.css';\r\n\r\nconst PokemonLayer = () => {\r\n  const [isOpened, setIsOpened] = useState(false);\r\n  const pokemonData = useSelector((state) => state.select);\r\n  const dispatchClick = useDispatch();\r\n\r\n  const toggleModal = () => {\r\n    if (isOpened) dispatchClick(selectPokemonClick(null));\r\n    setIsOpened(!isOpened)\r\n  }\r\n\r\n  if (pokemonData && !isOpened) toggleModal()\r\n  if (!pokemonData && isOpened) toggleModal()\r\n\r\n  return (\r\n    <Modal addClass={['modal__pokemon']} show={isOpened} onClose={toggleModal}>\r\n      {\r\n        pokemonData && (\r\n          <Pokemon \r\n            pokemonBase={pokemonData} \r\n          />\r\n        )\r\n      }\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default PokemonLayer;","export { default } from './PokemonModal';","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst RadioInput = ({ id, value, group, children, addClass, onChange, onBlur, ...props}) => {\r\n  return (\r\n    <div className={[...addClass].join(' ')} {...props}>\r\n      <input \r\n        id={id} \r\n        className=\"is-vHidden\"\r\n        type=\"radio\" \r\n        value={value} \r\n        name={group} \r\n        onChange={onChange}\r\n        onBlur={onBlur}\r\n      />\r\n      <label htmlFor={id}>\r\n        { children }\r\n      </label>\r\n    </div>\r\n  )\r\n}\r\n\r\nRadioInput.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  value: PropTypes.string,\r\n  group: PropTypes.string,\r\n  children: PropTypes.node,\r\n  addClass: PropTypes.array,\r\n  onBlur: PropTypes.func,\r\n  onChange: PropTypes.func\r\n}\r\n\r\nRadioInput.defaultProps = {\r\n  addClass: []\r\n};\r\n\r\nexport default RadioInput;","export { default } from './RadioInput';","import './Search.css';\r\nimport React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { searchKeyDown } from '../../actions'\r\n\r\nconst Search = () => {\r\n  const dispatchKeyDown = useDispatch();\r\n  const searchLabel = 'Search Pokemon';\r\n\r\n  return (\r\n    <div className=\"search\">\r\n      <label className=\"is-vHidden\" htmlFor=\"search-pokemon\">{searchLabel}</label>\r\n      <input \r\n        id=\"search-pokemon\"\r\n        className=\"search__input\" \r\n        type=\"text\" \r\n        placeholder={searchLabel}\r\n        onKeyUp={e => dispatchKeyDown(searchKeyDown(e.currentTarget.value))} \r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Search;","export { default } from './Search';","import './StartButton.css';\r\nimport React, { useState } from 'react';\r\nimport Button from '../Button';\r\nimport Modal from '../Modal';\r\nimport CloseGameModal from '../CloseGameModal/CloseGameModal';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { doStartGame } from '../../actions'\r\nimport Engine from '../../Engine';\r\n\r\nconst Header = () => {\r\n  const [showCloseGameModal, setShowCloseGameModal] = useState(false);\r\n  const [showNoCardsWarning, setShowNoCardsWarning] = useState(false);\r\n  const gameStarted = useSelector((state) => state.gameStarted);\r\n  const dispatchEvent = useDispatch();\r\n\r\n  const toggleStartEndGame = () => {\r\n    if (Engine.payerCards.length === 0) {\r\n      return showWarningOnScreen();\r\n    }\r\n    if (!gameStarted) {\r\n      return dispatchEvent(doStartGame());\r\n    } else {\r\n      setShowCloseGameModal(true);\r\n    }\r\n  }\r\n\r\n  const closeEndGameModal = () => {\r\n    setShowCloseGameModal(false)\r\n  }\r\n\r\n  const showWarningOnScreen = () => {\r\n    setShowNoCardsWarning(true);\r\n    setTimeout(() => {\r\n      setShowNoCardsWarning(false);\r\n    }, 1500);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Button addClass={['header__btn']} onClick={toggleStartEndGame} >\r\n        {\r\n          showCloseGameModal ? \r\n          (<span className=\"text\">End Game</span>) :\r\n          (<span className=\"text\">Start Game</span>)\r\n        }\r\n      </Button>\r\n      <Modal show={showNoCardsWarning} addClass={['modal__warr']}>\r\n        <span className=\"modal__warr__text\">Please select at least one pokemon</span>\r\n      </Modal>\r\n      <CloseGameModal show={showCloseGameModal} onClose={closeEndGameModal}/>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Header;","export { default } from './StartButton';","import { gql } from '@apollo/client';\r\n\r\nexport const ALL_POKEMONS = (number) => {\r\n  return gql`\r\n  {\r\n    pokemons(first: ${number}){\r\n      id\r\n      name\r\n      types\r\n      image\r\n      maxCP\r\n    }\r\n  }\r\n`;\r\n}\r\n\r\nexport const GET_POKEMON = (id, name) => {\r\n  return gql`\r\n    {\r\n      pokemon(id: \"${id}\", name: \"${name}\") {\r\n        id\r\n        name\r\n        weight {\r\n          minimum\r\n          maximum\r\n        }\r\n        height {\r\n          minimum\r\n          maximum\r\n        }\r\n        classification\r\n        types\r\n        resistant\r\n        attacks {\r\n          fast {\r\n            name\r\n            type\r\n            damage\r\n          }\r\n          special {\r\n            name\r\n            type\r\n            damage\r\n          }\r\n        }\r\n        weaknesses\r\n        fleeRate\r\n        maxCP\r\n        evolutions {\r\n          id\r\n          name\r\n        }\r\n        evolutionRequirements {\r\n          amount\r\n          name\r\n        }\r\n        maxHP\r\n        image\r\n      }\r\n    }\r\n  `;\r\n}","const botPokemonListReducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case 'ADDINGBOTS':\r\n      state = [...state, ...action.payload];\r\n      return state;\r\n    case 'REMOVEINGBOTS':\r\n      state = [];\r\n      return state;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default botPokemonListReducer;","const gameReducer = (state = false, action) => {\r\n  switch (action.type) {\r\n    case 'STARTGAME':\r\n      state = true;\r\n      return state;\r\n    case 'ENDGAME':\r\n      state = false;\r\n      return state;\r\n    case 'ASKENDGAME':\r\n      state = {gameEnded: true}\r\n      return state;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default gameReducer;","import { combineReducers } from 'redux';\r\nimport searcherReducer from './search';\r\nimport selectorReducer from './select';\r\nimport pokemonListReducer from './pokemonList';\r\nimport gameReducer from './game';\r\nimport botPokemonListReduce from './botPokemonList';\r\nimport playerActions from './playerActions';\r\n\r\nconst rootReducers = combineReducers({\r\n  textSearch: searcherReducer,\r\n  select: selectorReducer,\r\n  pokemonList: pokemonListReducer,\r\n  botPokemonList: botPokemonListReduce,\r\n  gameStarted: gameReducer,\r\n  playerAction: playerActions\r\n})\r\n\r\nexport default rootReducers;","const stateDef = {\r\n  pickedCardId: null,\r\n  playerTurn: true\r\n}\r\n\r\nconst playerActions = (state = stateDef, action) => {\r\n  switch (action.type) {\r\n    case 'PLAYERPICK':\r\n      state = { ...state, pickedCardId: action.payload }\r\n      return state;\r\n    case 'PLAYERTURN':\r\n      state = { ...state, playerTurn: action.payload }\r\n      return state;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default playerActions;","const pokemonListReducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case 'ADDING':\r\n      if (state.length === 4) return state;\r\n      const addIndex = state.findIndex(e => e.id === action.payload.id);\r\n      if (addIndex !== -1) {\r\n        state[addIndex] = action.payload;\r\n      } else {\r\n        state = [...state, action.payload];\r\n      }\r\n      return state;\r\n    case 'REMOVING':\r\n      const removeIndex = state.findIndex(e => e.id === action.payload.id);\r\n      if (removeIndex !== -1) {\r\n        state.splice(removeIndex, 1);\r\n      }\r\n      state = [...state];\r\n      return state;    \r\n    case 'RESETECARDS':\r\n      state = [];\r\n      return state;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default pokemonListReducer;","const searcherReducer = (state = '', action) => {\r\n  switch (action.type) {\r\n    case 'SEARCHING':\r\n      return action.payload\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default searcherReducer;","const selectorReducer = (state = '', action) => {\r\n  switch (action.type) {\r\n    case 'SELECTING':\r\n      state = action.payload;\r\n      return state;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default selectorReducer;","import React from 'react';\r\n\r\nconst Html = ({ content, state, reduxState }) => (\r\n  <html>\r\n    <body>\r\n      <div id=\"root\" dangerouslySetInnerHTML={{ __html: content }} />\r\n      <script dangerouslySetInnerHTML={{\r\n        __html: `window.__APOLLO_STATE__=${JSON.stringify(state).replace(/</g, '\\\\u003c')};`,\r\n        __html: `window.__PRELOADED_STATE__=${JSON.stringify(reduxState).replace(/</g, '\\\\u003c')};`,\r\n      }} />\r\n    </body>\r\n  </html>\r\n);\r\n\r\nexport default Html;","import 'cross-fetch/polyfill';\r\nimport express from 'express';\r\n// import path from 'path';\r\nimport React from 'react';\r\nimport ReactDOMServer from 'react-dom/server';\r\nimport {\r\n  ApolloProvider,\r\n  ApolloClient,\r\n  createHttpLink,\r\n  InMemoryCache\r\n} from '@apollo/client';\r\nimport { createStore } from 'redux'\r\nimport { Provider } from 'react-redux'\r\nimport { getDataFromTree } from \"@apollo/client/react/ssr\";\r\nimport Layout from '../../client/src/App'\r\n\r\n\r\nimport Html from './components/Html';\r\n// import App from '../../client/src/App';\r\nimport rootReducers from '../../client/src/reducers';\r\n\r\nconst app = express();\r\nconst basePort = 3000;\r\n\r\n// const appMarkup = ReactDOMServer.renderToString(\r\n//   <App />\r\n// );\r\n\r\napp.get('*', async (req, res) => {\r\n  const client = new ApolloClient({\r\n    ssrMode: true,\r\n    link: createHttpLink({\r\n      uri: 'http://localhost:3010',\r\n      credentials: 'same-origin',\r\n      headers: {\r\n        cookie: req.header('Cookie'),\r\n      },\r\n    }),\r\n    cache: new InMemoryCache(),\r\n  });\r\n\r\n  const store = createStore(rootReducers);\r\n\r\n  const App = (\r\n    <ApolloProvider client={client}>\r\n      <Provider store={store}>\r\n        <Layout />\r\n      </Provider>\r\n    </ApolloProvider>\r\n  );\r\n\r\n  const reduxState = store.getState();\r\n\r\n  getDataFromTree(App).then((content) => {\r\n    const initialState = client.extract();\r\n\r\n    const html = <Html content={content} state={initialState} reduxState={reduxState} />;\r\n  \r\n    res.status(200);\r\n    res.send(`<!doctype html>\\n${ReactDOMServer.renderToStaticMarkup(html)}`);\r\n    res.end();\r\n  });\r\n});\r\n\r\napp.listen(basePort, () => console.log(\r\n  `app Server is now running on http://localhost:${basePort}`\r\n));","module.exports = require(\"@apollo/client\");","module.exports = require(\"@apollo/client/react/ssr\");","module.exports = require(\"@babel/polyfill\");","module.exports = require(\"cross-fetch/polyfill\");","module.exports = require(\"express\");","module.exports = require(\"prop-types\");","module.exports = require(\"react\");","module.exports = require(\"react-dom/server\");","module.exports = require(\"react-redux\");","module.exports = require(\"redux\");"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAWA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;;;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AAEA;AACA;AACA;AACA;AAUA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;AAgCA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAAA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;;;AAAA;AACA;AACA;AAAA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AAAA;AAAA;AACA;AAFA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AAIA;;;AAEA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAXA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAWA;AAAA;AAAA;AACA;AAAA;AAbA;AACA;AAUA;AAAA;AAGA;AAdA;AAAA;AAAA;AAAA;AAAA;AACA;AAeA;AACA;;;AAhOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AACA;AACA;AAAA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;AAoMA;AACA;;;;;;;;;;;;AC9PA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAKA;AAAA;AACA;AACA;AAFA;AAAA;AAKA;AAAA;AACA;AACA;AAFA;AAAA;AAKA;AAAA;AACA;AACA;AAFA;AAAA;AAKA;AAAA;AACA;AADA;AAAA;AAIA;AAAA;AACA;AADA;AAAA;AAIA;AAAA;AACA;AADA;AAAA;AAIA;AAAA;AACA;AACA;AAFA;AAAA;AAKA;AAAA;AACA;AADA;AAAA;AAIA;AAAA;AACA;AACA;AAFA;AAAA;AAKA;AAAA;AACA;AACA;AAFA;AAAA;AAKA;AAAA;AACA;AACA;AAFA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAAA;AAEA;AACA;AAFA;AAKA;AAAA;AAKA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AAMA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;AC7GA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAKA;AAAA;AACA;AAAA;AAIA;AAAA;AAIA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAKA;AAAA;AACA;AAAA;AAIA;AAAA;AAMA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AAJA;AAOA;;;;;;;;;;;;;;;;;;;;;;;ACtEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AADA;AAMA;AACA;AACA;;;;;;;;;;;;AC1BA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAFA;AAKA;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAFA;AAKA;;;;;;;;;;;;AClCA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AADA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAFA;AADA;AASA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AADA;AAIA;;;;;;;;;;;;AC3CA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;;;;;;;;;;;;ACnBA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;;;;;;;;;;;;AC7BA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAFA;AAKA;;;;;;;;;;;;AC1CA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;;;;;;;;;;;;AC3BA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAKA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AAlBA;AAwBA;AACA;AACA;;;;;;;;;;;;AC5DA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAkbA;AAuBA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAAA;AACA;AAAA;AACA;AAAA;AAbA;AAwBA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAKA;AACA;AAEA;AACA;AADA;AAIA;AACA;AADA;AAIA;;;;;;;;;;;;ACvLA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAIA;AADA;AAOA;AACA;AACA;;;;;;;;;;;;ACjCA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AADA;AAIA;;;;;;;;;;;;ACpCA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AASA;AACA;AACA;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;ACtDA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AAEA;AACA;AAWA;AAEA;AACA;AA4CA;;;;;;;;;;;;;;;;;;;;;;;;;AC7DA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AARA;AAUA;AACA;AACA;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAXA;AAaA;AACA;AACA;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;;;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AAFA;AACA;AAIA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AARA;AAUA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AClBA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AArBA;AAuBA;AACA;AACA;;;;;;;;;;;;AC1BA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAJA;AAMA;AACA;AACA;;;;;;;;;;;;ACTA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AALA;AAOA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAAA;AAJA;AACA;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAHA;AAOA;AATA;AAYA;AAEA;AACA;AAAA;AACA;AAAA;AAMA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAlCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAoCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AChEA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}